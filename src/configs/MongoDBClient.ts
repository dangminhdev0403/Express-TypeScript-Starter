import logger from '@configs/logger.js'
import dotenv from 'dotenv'
import { Db, MongoClient, ServerApiVersion } from 'mongodb'
dotenv.config()

// üîß Helper: lo·∫°i b·ªè c√°c tr∆∞·ªùng k·ªπ thu·∫≠t kh·ªèi command log
function cleanMongoCommand(command: Record<string, any>) {
  const { apiVersion, apiStrict, apiDeprecationErrors, lsid, txnNumber, $clusterTime, $db, ...rest } = command

  // Log th√¥ng tin giao d·ªãch MongoDB
  logger.info(`Transaction Number: ${txnNumber ?? 'N/A'}`) // Ki·ªÉm tra n·∫øu txnNumber t·ªìn t·∫°i, n·∫øu kh√¥ng th√¨ ghi 'N/A'
  logger.info(`API Version: ${apiVersion}`) // Log phi√™n b·∫£n API
  logger.info(`API Strict Mode: ${apiStrict}`) // Log ch·∫ø ƒë·ªô strict c·ªßa API
  logger.info(`Deprecation Errors Enabled: ${apiDeprecationErrors}`) // Log n·∫øu c√≥ l·ªói deprecation

  // Ki·ªÉm tra v√† log th√¥ng tin Cluster Time n·∫øu c√≥
  if ($clusterTime && $clusterTime.clusterTime) {
    logger.info(`Cluster Time: ${$clusterTime.clusterTime}`)
  } else {
    logger.info(`Cluster Time: N/A`) // N·∫øu kh√¥ng c√≥ Cluster Time th√¨ ghi 'N/A'
  }

  // Ki·ªÉm tra v√† log th√¥ng tin Session ID (LSID) n·∫øu c√≥
  if (lsid && lsid.id) {
    logger.info(`Session ID (LSID): ${lsid.id}`)
  } else {
    logger.info(`Session ID (LSID): N/A`) // N·∫øu kh√¥ng c√≥ LSID th√¨ ghi 'N/A'
  }

  // Tr·∫£ v·ªÅ c√°c tr∆∞·ªùng c√≤n l·∫°i c·ªßa command v√† th√™m th√¥ng tin db
  return { ...rest, db: $db }
}

export class MongoDBClient {
  private static instance: MongoDBClient | null = null
  private readonly client: MongoClient
  private readonly db: Db
  private readonly uri: string

  private constructor() {
    this.uri = process.env.MONGO_URI as string

    this.client = new MongoClient(this.uri, {
      serverApi: { version: ServerApiVersion.v1, strict: true, deprecationErrors: true },
      monitorCommands: true
    })

    this.client.on('commandStarted', (event) => {
      const commandToLog = cleanMongoCommand(event.command)

      logger.debug(`[MongoDB][Started] ${event.commandName} ‚Üí ${JSON.stringify(commandToLog, null, 2)}`)
    })

    this.client.on('commandSucceeded', (event) => {
      logger.debug(`[MongoDB][Succeeded] ${event.commandName} (${event.duration}ms)`)
    })

    this.client.on('commandFailed', (event) => {
      logger.error(`[MongoDB][Failed] ${event.commandName}`, event.failure)
    })

    this.db = this.client.db(process.env.DB_NAME)
  }

  static getInstance(): MongoDBClient {
    MongoDBClient.instance ??= new MongoDBClient()
    return MongoDBClient.instance
  }

  async connect(): Promise<void> {
    try {
      await this.client.db('admin').command({ ping: 1 })
      logger.info('‚úÖ Connected to MongoDB')
    } catch (error) {
      logger.error('‚ùå MongoDB connection failed:', error)
      throw error
    }
  }

  getClient(): MongoClient {
    return this.client
  }

  getDb(): Db {
    return this.db
  }
}
